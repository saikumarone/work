HOST="your-hostname-or-user@hostname"; DB="postgres"; mkdir -p "$HOST"; for f in /sql_scripts/*.sql; do b="$(basename "$f" .sql)"; { echo "=========== $b ==========="; ssh -o BatchMode=yes "$HOST" "sudo -u postgres -i psql -v ON_ERROR_STOP=1 -d \"$DB\" -f -" < "$f"; } > "$HOST/$b.log" 2>&1; done





HOST="user@remotehost"; DB="postgres"; shopt -s nullglob; mkdir -p "$HOST"; \
INCLUDE_SCHEMAS="$(ssh -o BatchMode=yes "$HOST" "sudo -u postgres -i psql -At -d \"$DB\" -c \"SELECT COALESCE(string_agg(quote_literal(nspname), ','), '') FROM pg_namespace WHERE nspname NOT IN ('pg_catalog','information_schema') AND nspname NOT LIKE 'pg_toast%' AND nspname NOT LIKE 'pg_temp%';\"")"; \
[ -z "$INCLUDE_SCHEMAS" ] && INCLUDE_SCHEMAS="'public'"; \
for f in /sql_scripts/*.sql; do b="$(basename "$f" .sql)"; { \
  echo "=========== $b ==========="; \
  { printf "\\set include_schemas %s\n" "$INCLUDE_SCHEMAS"; cat "$f"; } | \
  ssh -o BatchMode=yes "$HOST" "sudo -u postgres -i psql -v ON_ERROR_STOP=1 -d \"$DB\" -f -"; \
} > "$HOST/$b.log" 2>&1; done






HOST="user@remotehost"; DB="postgres"; shopt -s nullglob; mkdir -p "$HOST"; \
INCLUDE_SCHEMAS_RAW="$(ssh -o BatchMode=yes "$HOST" "sudo -u postgres -i psql -At -d \"$DB\" -c \"SELECT COALESCE(string_agg(quote_literal(nspname), ','), '') FROM pg_namespace WHERE nspname NOT IN ('pg_catalog','information_schema') AND nspname NOT LIKE 'pg_toast%%' AND nspname NOT LIKE 'pg_temp%%';\"")"; \
[ -z "$INCLUDE_SCHEMAS_RAW" ] && INCLUDE_SCHEMAS_RAW="'public'"; \
INCLUDE_SCHEMAS_ESCAPED="$(printf "%s" "$INCLUDE_SCHEMAS_RAW" | sed "s/'/''/g")"; \
for f in /sql_scripts/*.sql; do b="$(basename "$f" .sql)"; { \
  echo "=========== $b ==========="; \
  { printf "\\set include_schemas '%s'\n" "$INCLUDE_SCHEMAS_ESCAPED"; cat "$f"; } | \
  ssh -o BatchMode=yes "$HOST" "sudo -u postgres -i psql -v ON_ERROR_STOP=1 -d \"$DB\" -f -"; \
} > "$HOST/$b.log" 2>&1; done




postgres=# WITH relevant_schemas AS (
    SELECT n.oid AS namespace_oid, n.nspname
    FROM pg_namespace n
    WHERE nspname IN (:include_schemas)
)
SELECT s.nspname||'.'||coalesce(rel.relname,'?')||'.'||con.contype||'.'||con.conname as check_cons
FROM pg_constraint con
 INNER JOIN relevant_schemas s ON s.namespace_oid = con.connamespace
 LEFT OUTER JOIN pg_catalog.pg_class rel ON rel.oid = con.conrelid
WHERE con.contype='c'
order by 1;
^C
postgres=# WITH relevant_schemas AS (
    SELECT n.oid AS namespace_oid, n.nspname
    FROM pg_namespace n
    WHERE nspname IN ('audit')
)
SELECT s.nspname||'.'||coalesce(rel.relname,'?')||'.'||con.contype||'.'||con.conname as check_cons
FROM pg_constraint con
 INNER JOIN relevant_schemas s ON s.namespace_oid = con.connamespace
 LEFT OUTER JOIN pg_catalog.pg_class rel ON rel.oid = con.conrelid
WHERE con.contype='c'
order by 1;
ERROR:  operator is not unique: text || "char"
LINE 6: ...ECT s.nspname||'.'||coalesce(rel.relname,'?')||'.'||con.cont...
                                                             ^
HINT:  Could not choose a best candidate operator. You might need to add explicit type casts.
